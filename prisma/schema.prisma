generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model boquettes {
  id_boquette      Int     @id @default(autoincrement())
  nom              String? 
  solde            Float @default(0.00)
  mot_de_passe     String? 
  ordre_apparition Int
  partie_pg        Boolean
  nom_simple       String? 
  actif            Boolean     @default(true)

  consommations              consommations[] @relation(map:"consommation_pg")
}

model categories {
  id_categorie Int    @id @default(autoincrement())
  id_boquette  Int
  nom          String 
}

model config {
  id     Int    @id @default(autoincrement())
  nom    String 
  valeur String 
}

model consommations {
  id_conso    Int                    @id @default(autoincrement())
  type        consommations_type @map("type_")
  from        Int? @map("from_")
  to          Int? @map("to_")  
  id_produit  Int?
  quantite    Int?
  solde_avant Float                  
  solde_apres Float                  
  montant     Float                  
  libelle     String                 
  date_conso  DateTime               
  annule      Boolean                @default(false)
  data        Json?
  rhopseur    String?

  produit    produits? @relation(fields: [id_produit], references: [id_produit])

  from_pg        pg?                    @relation(fields: [from], references: [id_pg], map: "consommation_from_pg", name:"consommation_from_pg")
  to_pg          pg?                    @relation(fields: [to], references: [id_pg], map: "consommation_to_pg", name:"consommation_to_pg")
  
  to_boquette      boquettes?       @relation(fields: [to], references: [id_boquette], map: "consommation_to_boq")
  to_fams          fams?                @relation(fields: [to], references: [nums], map: "consommation_to_fams")
}

model fams {
  nums  Int     @id
  solde Float

  consommations              consommations[] @relation(map: "consommation_fams")
}

model commandes {
  id          Int @id @default(autoincrement())
  type        consommations_type @map("type_")
  from        Int? @map("from_")
  to          Int? @map("to_")  
  libelle     String
  statut      Int @default(-1)
  date        DateTime @default(now())
}

model kve {
  id         Int    @id @default(autoincrement())
  name       String 
  price      Float  
  prixachat  Float  @default(0) 
  inventaire Int
}

model pg {
  id_pg                      Int        @id @default(autoincrement())
  nom                        String     
  prenom                     String     
  bucque                     String?
  nums                       Int
  tabagns                    tabagns
  proms                      Int
  email                      String     
  solde                      Float    @default(0.00)
  mot_de_passe               String     @default("91b1bb7c2d6d0ccbaa574c690930b317ad44ebb9") 
  actif                      Boolean       @default(true) 
  ddp                      Boolean        @default(false)
  can_buy                 Boolean         @default(true)
  anciens_autorises       String[]          @default([]) 

  consommationsFromPg   consommations[] @relation("consommation_from_pg", map: "consommation_from_pg")
  consommationsToPg     consommations[] @relation("consommation_to_pg", map: "consommation_to_pg")

  @@unique([nums, tabagns, proms])
}

model photos {
  id_pg Int    @id @default(autoincrement())
  nom   String 
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model produits {
  id_produit   Int    @id @default(autoincrement())
  id_boquette  Int
  id_categorie Int 
  nom          String 
  prix         Float  
  libreservice Boolean    @default(false)
  prix2        Float      @default(0)
  inventaire   Int? 

  consommations consommations[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model rechargements {
  id_rechargement Int      @id @default(autoincrement())
  id_pg           Int
  keylydia        String   
  status          Int      @default(0)
  date            DateTime 
  montant         Float    
}

model spotify {
  id           Int    @id @default(autoincrement())
  id_pg        Int
  lien_musique String 
  titre_auteur String 
}

enum consommations_type {
  pg_pg
  pg_boq
  ext_boq
  pg_fams
  ext_fams
  pg_ext
}


enum tabagns {
  Ch
  An
  Ai
  Cl
  Li
  Bo
  Me
  Ka
}
